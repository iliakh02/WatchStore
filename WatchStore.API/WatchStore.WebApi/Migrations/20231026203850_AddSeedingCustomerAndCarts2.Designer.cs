// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchStore.WebApi.Repositories;

#nullable disable

namespace WatchStore.WebApi.Migrations
{
    [DbContext(typeof(WatchStoreDbContext))]
    [Migration("20231026203850_AddSeedingCustomerAndCarts2")]
    partial class AddSeedingCustomerAndCarts2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WatchStore.WebApi.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            DeliveryAddress = "Test delivery address #112233",
                            Name = "User",
                            PhoneNumber = "",
                            Surname = "Test"
                        });
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Elegant silver watch with a leather strap.",
                            ImgUrl = "https://idom.kiev.ua/image/Watch/Watch-Ultra/Apple-Watch-Series-Ultra-ocean-midnight-photo.jpg",
                            Name = "Classic Silver Watch",
                            Price = 99.99m,
                            Rating = 4.0m,
                            TotalAmount = 500
                        },
                        new
                        {
                            Id = 2,
                            Description = "Water-resistant chronograph watch for sports enthusiasts.",
                            ImgUrl = "https://m.media-amazon.com/images/I/71VjM5LOeYL._AC_UY780_.jpg",
                            Name = "Sporty Chronograph Watch",
                            Price = 129.99m,
                            Rating = 4.8m,
                            TotalAmount = 20
                        },
                        new
                        {
                            Id = 3,
                            Description = "Trendy rose gold watch with a minimalist design.",
                            ImgUrl = "https://www.linjer.co/cdn/shop/products/linjer-classic-watch-38-gunmetal-tan-1-front_grande.jpg?v=1602577160",
                            Name = "Rose Gold Fashion Watch",
                            Price = 79.99m,
                            Rating = 3.4m,
                            TotalAmount = 400
                        },
                        new
                        {
                            Id = 4,
                            Description = "Smartwatch with fitness tracking and notifications.",
                            ImgUrl = "https://images.samsung.com/is/image/samsung/p6pim/ua/2307/gallery/ua-galaxy-watch6-r935-sm-r930nzeasek-537479860?$650_519_PNG$",
                            Name = "Digital Smartwatch",
                            Price = 149.99m,
                            Rating = 4.6m,
                            TotalAmount = 40
                        },
                        new
                        {
                            Id = 5,
                            Description = "Exquisite gold watch with diamond-studded dial.",
                            ImgUrl = "https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/ML733_VW_34FR+watch-case-41-stainless-gold-s9_VW_34FR+watch-face-41-stainless-gold-s9_VW_34FR?wid=2000&hei=2000&fmt=png-alpha&.v=1694507905569",
                            Name = "Luxury Gold Watch",
                            Price = 299.99m,
                            Rating = 4.9m,
                            TotalAmount = 15
                        },
                        new
                        {
                            Id = 6,
                            Description = "Classic leather watch for a timeless style.",
                            ImgUrl = "https://www-konga-com-res.cloudinary.com/w_400,f_auto,fl_lossy,dpr_3.0,q_auto/media/catalog/product/U/O/92910_1666897463.jpg",
                            Name = "Vintage Leather Watch",
                            Price = 89.99m,
                            Rating = 4.2m,
                            TotalAmount = 200
                        },
                        new
                        {
                            Id = 7,
                            Description = "Durable sports watch for diving enthusiasts.",
                            ImgUrl = "https://fossil.scene7.com/is/image/FossilPartners/FS5384_main?$sfcc_fos_medium$",
                            Name = "Diving Sports Watch",
                            Price = 159.99m,
                            Rating = 4.5m,
                            TotalAmount = 30
                        },
                        new
                        {
                            Id = 8,
                            Description = "Stainless steel watch with a modern design.",
                            ImgUrl = "https://m.media-amazon.com/images/I/81nC4u9eYfL._AC_UY1000_.jpg",
                            Name = "Sleek Stainless Steel Watch",
                            Price = 109.99m,
                            Rating = 4.3m,
                            TotalAmount = 150
                        },
                        new
                        {
                            Id = 9,
                            Description = "Bracelet with built-in fitness tracking features.",
                            ImgUrl = "https://img.piaget.com/new-product-banner-normal-2/2cbb5d5c3aa87deb32fa85058422982dfec2bfb2.jpg",
                            Name = "Fitness Tracker Bracelet",
                            Price = 49.99m,
                            Rating = 4.1m,
                            TotalAmount = 100
                        },
                        new
                        {
                            Id = 10,
                            Description = "Watch with a unique wooden dial for nature lovers.",
                            ImgUrl = "https://www.raymond-weil.us/wp-content/uploads/2023/04/RW_toccata_5385-pc5-00859_rvb_700x860px_72dpi-1.png",
                            Name = "Wooden Dial Watch",
                            Price = 69.99m,
                            Rating = 4.7m,
                            TotalAmount = 80
                        },
                        new
                        {
                            Id = 11,
                            Description = "Smartwatch with advanced fitness tracking capabilities.",
                            ImgUrl = "https://www.vaerwatches.com/cdn/shop/files/GMT-Home-Collection.jpg?v=1678902341&width=1000",
                            Name = "Smart Fitness Watch",
                            Price = 179.99m,
                            Rating = 4.6m,
                            TotalAmount = 25
                        },
                        new
                        {
                            Id = 12,
                            Description = "Casual watch with a comfortable canvas strap.",
                            ImgUrl = "https://www.vaerwatches.com/cdn/shop/files/G5-Batman-QR-WFL-BLK.jpg?v=1684430729&width=1200",
                            Name = "Casual Canvas Strap Watch",
                            Price = 59.99m,
                            Rating = 4.0m,
                            TotalAmount = 120
                        },
                        new
                        {
                            Id = 13,
                            Description = "Luxurious watch with diamond encrusted details.",
                            ImgUrl = "https://www.anguscoote.com.au/content/products/citizen-mens-quartz-watch-5065022-141566.jpg?width=1200&height=630&fit=bounds",
                            Name = "Diamond Encrusted Watch",
                            Price = 499.99m,
                            Rating = 4.9m,
                            TotalAmount = 10
                        },
                        new
                        {
                            Id = 14,
                            Description = "Durable watch designed for outdoor activities.",
                            ImgUrl = "https://www.prouds.com.au/content/products/g-shock-watch-by-casio-5149229-140528.jpg?canvas=1:1&auto=webp&optimize=high&width=375",
                            Name = "Rugged Outdoor Watch",
                            Price = 129.99m,
                            Rating = 4.4m,
                            TotalAmount = 35
                        },
                        new
                        {
                            Id = 15,
                            Description = "Elegantly designed watch with a ceramic strap.",
                            ImgUrl = "https://i02.appmifile.com/619_operator_in/13/05/2021/f1781d7f24bd880a489a6a72088a261c!800x800!85.png",
                            Name = "Elegant Ceramic Watch",
                            Price = 199.99m,
                            Rating = 4.8m,
                            TotalAmount = 18
                        },
                        new
                        {
                            Id = 16,
                            Description = "Classic pocket watch with a vintage charm.",
                            ImgUrl = "https://www.watchportal.com.ph/cdn/shop/products/1_d9fb14cf-cf36-4ee4-a513-7ecded3a1c4c.jpg?v=1600303384",
                            Name = "Pocket Watch",
                            Price = 79.99m,
                            Rating = 4.3m,
                            TotalAmount = 60
                        },
                        new
                        {
                            Id = 17,
                            Description = "Watch with a minimalist design for a clean look.",
                            ImgUrl = "https://timex.eu/cdn/shop/products/TW2V42700.png?v=1687315799&width=990",
                            Name = "Minimalist Design Watch",
                            Price = 69.99m,
                            Rating = 4.2m,
                            TotalAmount = 90
                        },
                        new
                        {
                            Id = 18,
                            Description = "Pilot watch with aviation-inspired features.",
                            ImgUrl = "https://www.watches.com/cdn/shop/products/Timex-TW2V70100_1800x1800.jpg?v=1678413063",
                            Name = "Aviator Pilot Watch",
                            Price = 139.99m,
                            Rating = 4.5m,
                            TotalAmount = 25
                        },
                        new
                        {
                            Id = 19,
                            Description = "Ring with smart features like notifications and health tracking.",
                            ImgUrl = "https://staticimg.titan.co.in/Sonata/Catalog/7140WL02_1.jpg?pView=listing",
                            Name = "Smart Ring",
                            Price = 89.99m,
                            Rating = 4.1m,
                            TotalAmount = 70
                        },
                        new
                        {
                            Id = 20,
                            Description = "Fitness band with a digital display for activity tracking.",
                            ImgUrl = "https://images-static.nykaa.com/media/catalog/product/8/7/875c3d17140NL05_1.jpg?tr=w-500,pr-true",
                            Name = "Digital Fitness Band",
                            Price = 39.99m,
                            Rating = 4.0m,
                            TotalAmount = 150
                        },
                        new
                        {
                            Id = 21,
                            Description = "Antique pocket watch with a brass finish.",
                            ImgUrl = "https://www.chanel.com/images//t_one////q_auto:good,f_auto,fl_lossy,dpr_1.2/w_1920/j12-interstellar-watch-38-mm-black-black-ceramic-steel-diamond-packshot-default-h7989-9528001626142.jpg",
                            Name = "Antique Brass Pocket Watch",
                            Price = 119.99m,
                            Rating = 4.6m,
                            TotalAmount = 30
                        },
                        new
                        {
                            Id = 22,
                            Description = "Environmentally friendly watch powered by solar energy.",
                            ImgUrl = "https://www.hublot.com/sites/default/files/styles/homepage_hero_image_mobile/public/2023-03/MP-13-Tourbillon-Bi-Axis-Retrograde-44-mm-homepage.png?itok=EU0Daw2P",
                            Name = "Solar-Powered Watch",
                            Price = 149.99m,
                            Rating = 4.7m,
                            TotalAmount = 22
                        },
                        new
                        {
                            Id = 23,
                            Description = "Watch with a stylish mesh strap for a modern look.",
                            ImgUrl = "https://www.boat-lifestyle.com/cdn/shop/products/a09a67f0-75bd-42b8-8f0d-58ffad51e03b_600x.png?v=1625045372",
                            Name = "Stylish Mesh Strap Watch",
                            Price = 109.99m,
                            Rating = 4.2m,
                            TotalAmount = 50
                        },
                        new
                        {
                            Id = 24,
                            Description = "Sports watch with digital display and multiple functions.",
                            ImgUrl = "https://cdn.opstatics.com/store/20170907/assets/images/events/2021/03/watches/en/common/1920/kv/kv-2.png",
                            Name = "Digital Sports Watch",
                            Price = 79.99m,
                            Rating = 4.3m,
                            TotalAmount = 65
                        },
                        new
                        {
                            Id = 25,
                            Description = "Watch with a scratch-resistant sapphire crystal.",
                            ImgUrl = "https://m.media-amazon.com/images/I/718ndu+NQnL._AC_SL1500_.jpg",
                            Name = "Sapphire Crystal Watch",
                            Price = 199.99m,
                            Rating = 4.8m,
                            TotalAmount = 18
                        });
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "admin",
                            Password = "admin",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.CartItem", b =>
                {
                    b.HasOne("WatchStore.WebApi.Entities.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchStore.WebApi.Entities.Product", null)
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.Order", b =>
                {
                    b.HasOne("WatchStore.WebApi.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.OrderItem", b =>
                {
                    b.HasOne("WatchStore.WebApi.Entities.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchStore.WebApi.Entities.Product", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.User", b =>
                {
                    b.HasOne("WatchStore.WebApi.Entities.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("WatchStore.WebApi.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
